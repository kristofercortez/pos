{% extends "GistTemplateBundle::base.html.twig" %}
{% import "GistTemplateBundle::form.html.twig" as form %}

{% block content %}
<div class="page-content">
	<form method="post" class="form-horizontal" onsubmit="return checkForm();">
		<div class="row" style="width: 100%;">
			<div class="col-md-1"></div>
        <div class="col-md-10">
        	<h2 class="form-section">Split Transaction {{object.getTransDisplayId|default('')}}</h2>
				<br>

                <div class="portlet-body form">
                    <!-- BEGIN FORM-->

                        <div class="form-body">
                            <h4 class="form-section">Information</h4>
                            <div class="row">
                                <div class="col-md-6">
                                    {{ form.group_text('Receipt Number', 'receipt_number', object.getTransDisplayId|default(''), 4, 5, true) }}
                                    {{ form.group_text('Date', 'date', object.getDateCreateFormattedPOS|default(''), 4, 5, true) }}
                                    {{ form.group_text('Cosnultant', 'consultant', customer_creator|default(''), 4, 5, true) }}
                                    {{ form.group_text('Location', 'location', x|default('Default Location'), 4, 5, true) }}
                                    {{ form.group_text('Received Amount', 'grand_total', object.getPaymentIssued|number_format(2, '.', ',')|default(''), 4, 5, true) }}
                                </div>
                                <div class="col-md-6">
                                    {{ form.group_text('Customer Name', 'customer', customer.getNameFormatted|default(''), 4, 5, true) }}
                                    {{ form.group_text('Email', 'email', customer.getCEmailAddress|default(''), 4, 5, true) }}
                                    {{ form.group_text('Contact No', 'contact_no', customer.getMobileNumber|default(''), 4, 5, true) }}
                                    {{ form.group_text('Address', 'address', customer.getAddress1|default(''), 4, 5, true) }}
                                    {{ form.group_text('Birthdate', 'birthdate', customer.getBirthdate|default(''), 4, 5, true) }}
                                </div>
                            </div>                           
                            <h4 class="form-section">Split 
                                {% if object.getTransactionMode|default('none') != 'frozen' %}
                                    <a href="javascript:void(0);" class="btn default btn-xs pull-right green" onclick="addConsultant()"><i class="fa fa-plus"></i> Add Consultant</a>
                                {% endif %}

                            </h4>

                            <table class="table table-striped table-bordered table-hover" style="margin-top: 20px;" id="list_table">
                                <thead>
                                    <tr>
                                        <th width="45%">Consultant</th>
                                        <th width="20%">Sales Commission Rate</th>
                                        <th width="20%">Amount</th>
                                        <th width="5%"></th>
                                    </tr>
                                </thead>
                                <tbody id="partition_entries">
                                    {% if object.hasSplit %}
                                        {% for s in object.getSplits %}
                                            <tr class="row_entry">
                                                <input type="hidden" class="form-control consultant_id" name="consultant_id[]" value="{{s.getConsultant.getERPID|default('none')}}">
                                                <td>{{ form.group_select_only_split("", "consultant_name[]", emp_opts, s.getConsultant.getERPID|default('none'), 12, 12, false) }}</td>                             
                                                <td>
                                                    <div class="input-group">
                                                        <input type="number" max="100" step="0.01" class="form-control percent_allocation" name="percent_allocation[]" placeholder="" aria-describedby="sizing-addon1" value="{{s.getPercent|number_format(2, '.', ',')|default('')}}">
                                                        <span class="input-group-addon" id="sizing-addon1">%</span>
                                                    </div>
                                                </td>
                                                <td><input type="number" max="999999" step="0.01" class="form-control amount_allocation" name="amount_allocation[]" value="{{(s.getAmount)|number_format(2, '.', '')|default('')}}"></td>
                                                <td ><a href="javascript:void(0)" class="btn btn-xs default red rem_row"><i class="fa fa-times" aria-hidden="true"></i></a></td>
                                            </tr>
                                        {% endfor %}
                                    {% else %}
                                        <tr class="row_entry">
                                            <input type="hidden" class="form-control consultant_id" name="consultant_id[]" value="{{app.getUser.getERPID|default('N/A')}}">
                                            <td>{{ form.group_select_only_split("", "consultant_name[]", emp_opts, app.getUser.getERPID, 12, 12, false) }}</td>
                                            
                                            <td>
                                                <div class="input-group">
                                                    <input type="number" max="100" step="0.01" class="form-control percent_allocation" name="percent_allocation[]" placeholder="" aria-describedby="sizing-addon1" value="100.00">
                                                    <span class="input-group-addon" id="sizing-addon1">%</span>
                                                </div>
                                            </td>
                                            {% if object.getTransactionMode|default('') == 'Deposit' or object.getReferenceTransaction.getTransactionMode|default('') == 'Deposit' %}
                                                <td><input type="number" max="999999" step="0.01" class="form-control amount_allocation" name="amount_allocation[]" value="{{object.getPaymentIssued|number_format(2, '.', '')|default('')}}"></td>
                                            {% else %}
                                                <td><input type="number" max="999999" step="0.01" class="form-control amount_allocation" name="amount_allocation[]" value="{{object.getPaymentIssued|number_format(2, '.', '')|default('')}}"></td>
                                            {% endif %}
                                            <td ><a href="javascript:void(0)" class="btn btn-xs default red rem_row"><i class="fa fa-times" aria-hidden="true"></i></a></td>
                                        </tr>
                                    {% endif %}
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td><p class="pull-right" style="vertical-align: middle;"><b>Total</b></p></td>
                                        <td>
                                            <div class="input-group">
                                                <input type="text" class="form-control total_percent" name="total_percent" placeholder="" aria-describedby="sizing-addon1" value="100" readonly="true" id="total_percent">
                                                <span class="input-group-addon" id="sizing-addon1">%</span>
                                            </div>
                                        </td>
                                        <td><input type="text" name="total_amount" id="total_amount" readonly="true" class="form-control"></td>
                                        <td></td>
                                    </tr>
                                </tfoot>
                            </table>
                            {% if object.getTransactionMode == 'Deposit' or object.getReferenceTransaction.getTransactionMode|default('') == 'Deposit' %}
                            <i>Split amount is based on amount of issued items</i>
                            {% endif %}
                        </div>
                        <div class="form-actions fluid">
                            <div class="col-md-9">
                                {% if object.getTransactionMode|default('none') == 'frozen' %}
                                    <button type="submit" class="btn default btn blue" disabled="true"><i class="fa fa-save"></i> Save Split</button>
                                    <a href="{{ path('gist_pos_reports_edit_form', { 'id': object.getID|default('') }) }}" class="btn default btn  green-meadow"><i class="fa fa-eye"></i> View Transaction</a>
                                    <a href="{{ path('gist_pos_reports') }}" class="btn default">Go Back</a>
                                {% else %}
    								<button type="submit" class="btn default btn blue"><i class="fa fa-save"></i> Save Split</button>
                                    <a href="{{ path('gist_pos_reports_edit_form', { 'id': object.getID|default('') }) }}" class="btn default btn  green-meadow"><i class="fa fa-eye"></i> View Transaction</a>
                                    <a href="{{ path('gist_pos_reports') }}" class="btn default">Go Back</a>
                                {% endif %}
                            </div>
                        </div>
                    
                    <!-- END FORM-->
            </div>
        </div>
        <div class="col-md-1"></div>
    </div>
</form>
</div>
{% endblock %}

{% block js %}
    <script>
    function autoCompute() {
        var table_rows = parseInt($('#partition_entries tr').length);
        var mode = "{{object.getTransactionMode|default('')}}";
        var ref_mode = "{{object.getReferenceTransaction.getTransactionMode|default('')}}";
        var transaction_total = 0;
        if (mode == 'Deposit' || ref_mode == 'Deposit') {
            transaction_total = parseFloat("{{object.getPaymentIssued|default('0')}}");
        } else if (mode == 'refund' || mode == 'exchange') {
            transaction_total = parseFloat("{{object.getBalance|default('0')}}");
        } else {
            transaction_total = parseFloat("{{object.getPaymentIssued|default('0')}}");
        }
        
        var indiv_amount = transaction_total/table_rows;
        var percent = (indiv_amount/transaction_total)*100;

        if (transaction_total < 0) {
            percent = percent * -1;
        }

        var new_percent = parseFloat(percent, 10);
        // var fina_percent = new_percent.toFixed(2);

        $('.percent_allocation').each(function () {
            $(this).val(new_percent.toFixed(2));
        });

        $('.amount_allocation').each(function () {
            $(this).val(indiv_amount.toFixed(2));
        });
    }
        function addConsultant() {
            var matches = 0;
            $(":input.consultant_id").each(function(i, val) {
              if ($(this).val() == 'none') {
                matches++;
              }
            });

            if (matches > 0) {
                swal('Empty consultant field!', 'Select a consultant before adding a new one', 'error');
                return false;
            }

            var field = '<tr class="row_entry">';
                field += '<input type="hidden" class="form-control consultant_id" name="consultant_id[]" value="none">';
                field += '        <td>{{ form.group_select_only_split("", "consultant_name[]", emp_opts, "", 12, 12, false)|e("js") }}</td> ';       
                field += '       <td>';
                field +=  '  <div class="input-group">';
                field +=  '  <input type="number" max="100" step="0.01" class="form-control percent_allocation" name="percent_allocation[]" placeholder="" aria-describedby="sizing-addon1" value="0">';
                field += '               <span class="input-group-addon" id="sizing-addon1">%</span>';
                field += '           </div>';
                field += '       </td>';
                field +=  '<td><input type="number" max="999999" step="0.01"class="form-control amount_allocation" name="amount_allocation[]" value="0"></td>';
                field += '       <td ><a href="javascript:void(0)" class="btn btn-xs default red rem_row"><i class="fa fa-times" aria-hidden="true"></i></a></td>';
                field += '   </tr>';

            $('#partition_entries').append(field);
           autoCompute();
           computeAutoTotals();

        }

        function computeTotals() {
            
            var pct_total = 0;
            var amt_total = 0;

            var arr = [];
            i = 0;


            $('.percent_allocation').each(function() {
                if ($(this).val() != '') {
                    pct_total += parseFloat($(this).val());
                    arr[i++] = $(this).val();
                }
                
            });

            $('.amount_allocation').each(function() {
                if ($(this).val() != '') {
                    amt_total += parseFloat($(this).val());
                }
                
            });

            if (!!arr.reduce(function(a, b){ return (a === b) ? a : NaN; })) {
                //pct_total = Math.round(pct_total);
                amt_total = Math.round(amt_total);
                var final_pct_total = parseFloat(pct_total, 10);
            } else {
                var final_pct_total = parseFloat(pct_total, 10);
            }

            $('#total_percent').val(final_pct_total.toFixed(2));
            $('#total_amount').val(amt_total.toFixed(2));
        }

        function computeAutoTotals() {
            
            var pct_total = 0;
            var amt_total = 0;

            $('.percent_allocation').each(function() {
                if ($(this).val() != '') {
                    pct_total += parseFloat($(this).val());
                }
                
            });

            $('.amount_allocation').each(function() {
                if ($(this).val() != '') {
                    amt_total += parseFloat($(this).val());
                }
                
            });

            amt_total = Math.round(amt_total);
            pct_total = Math.round(pct_total);
            var final_pct_total = parseFloat(pct_total, 10);

            $('#total_percent').val(final_pct_total.toFixed(2));
            $('#total_amount').val(amt_total.toFixed(2));
        }

        function checkForm(){
            var contents = {};
            var duplicates = false;
            $(".consultant_id").each(function() {
                var tdContent = $(this).val();
                if (contents[tdContent]) {
                    duplicates = true;
                }
                contents[tdContent] = true;
            });    

            var inv_cons = false;
            $(".consultant_id").each(function() {
                if ($(this).val() == 'none') {
                    inv_cons = true;
                }
            });

            if (inv_cons) {
                swal('Invalid consultant in field!','', 'error');
                return false;
            }

            if (duplicates) {
                swal('Duplicate consultant found!','', 'error');
                return false;
            }

            var mode = "{{object.getTransactionMode|default('')}}";
            var ref_mode = "{{object.getReferenceTransaction.getTransactionMode|default('')}}";
            var transaction_total = 0;
            if (mode == 'Deposit' || ref_mode == 'Deposit') {
                transaction_total = parseFloat("{{object.getPaymentIssued|default('0')}}");
            } else if (mode == 'refund' || mode == 'exchange') {
                transaction_total = parseFloat("{{object.getBalance|default('0')}}");
            } else {
                transaction_total = parseFloat("{{object.getPaymentIssued|default('0')}}");
            }

            if (transaction_total > 0) {
                if ($('#total_percent').val() != '100.00'){
                    swal('Invalid split!','Please check percentages', 'error');
                    return false;
                }

            } else {
                if ($('#total_percent').val() != '-100.00'){
                    swal('Invalid split!','Please check percentages', 'error');
                    return false;
                }

            }

            if ($('#total_amount').val() != transaction_total){
                swal('Invalid split!','Please check amounts', 'error');
                return false;
            }

            if (!inv_cons && !duplicates) {
                return true;
            } else {
                return false;
            }
            
        }

        $(document).ready(function() {
            var mode = "{{object.getTransactionMode|default('')}}";
            var ref_mode = "{{object.getReferenceTransaction.getTransactionMode|default('')}}";
            var transaction_total = 0;
            if (mode == 'Deposit' || ref_mode == 'Deposit') {
                transaction_total = parseFloat("{{object.getPaymentIssued|default('0')}}");
            } else if (mode == 'refund' || mode == 'exchange') {
                transaction_total = parseFloat("{{object.getBalance|default('0')}}");
            } else {
                transaction_total = parseFloat("{{object.getPaymentIssued|default('0')}}");
            }

            $(document).on("click",".rem_row", function(e){
                var table_rows = parseInt($('#partition_entries tr').length);
                if (table_rows <= 1) {
                    swal('You must select at least one consultant!','', 'error');
                    return 0;
                } else {
                   var tr = $(this).closest('tr');
                    tr.remove();
                    
                    autoCompute();
                    computeAutoTotals();
                    return false;
                }
            });

            computeTotals();

            $(document).on('change', '.consultant_selection', function()
            {
                var select_consultant_id = $(this).val();
                var row = $(this).closest('.row_entry');
                var hidden_id = row.find('.consultant_id');
                hidden_id.val(select_consultant_id);

                var contents = {};
                var duplicates = false;
                $(".consultant_id").each(function() {
                    var tdContent = $(this).val();
                    if (contents[tdContent]) {
                        duplicates = true;
                    }
                    contents[tdContent] = true;
                }); 

                if (duplicates && $(this).val() != 'none') {
                    swal('Consultant '+$(this).find("option:selected").text()+' already selected!','', 'error');

                    $(this).val('none').prop('selected', true);
                    var select_consultant_id = $(this).val();
                    var row = $(this).closest('.row_entry');
                    var hidden_id = row.find('.consultant_id');
                    hidden_id.val(select_consultant_id);

                    return false;
                }

            });
            // $('.percent_allocation').on("change", function()
            $(document).on('keyup change', '.percent_allocation', function()
            {
                var allocation = parseFloat($(this).val());
                if (allocation == '') {
                    $(this).val('');
                    allocation = 0;
                }
                if (allocation > 100) {
                    swal('Invalid allocation!','Please enter a value from 1 to 100', 'error');
                    $(this).val('0');
                    allocation = 0;
                }
                var row = $(this).closest('.row_entry');
                var final = (allocation/100)*transaction_total;
                if (transaction_total < 0) {
                    final = final * -1;
                }

                var amount_allocation = row.find('.amount_allocation');
                amount_allocation.val(final.toFixed(2));
                computeTotals();
            });

            $(document).on('keyup change', '.amount_allocation', function()
            {
                var allocation = parseFloat($(this).val());
                if (allocation > transaction_total && transaction_total > 0) {
                    swal('Invalid allocation!','Please enter a value from 1 to '+transaction_total+'', 'error');
                    $(this).val('');
                    allocation = 0;
                }
                var row = $(this).closest('.row_entry');
                var final = (allocation/transaction_total)*100;
                if (transaction_total < 0) {
                    final = final * -1;
                }
                var amount_allocation = row.find('.percent_allocation');
                amount_allocation.val(final.toFixed(2));
                computeTotals();
            });
        });
    </script>
{% endblock %}
